class Solution {
public:
    //Function to find largest rectangular area possible in a given histogram.
    long long getMaxArea(long long a[], int n)
    {
       stack<pair<int,int>>s1,s2;
       vector<int>nsl,nsr; int ind=-1;
       for(int i=0;i<n;i++)
       {
           if(s1.size()==0)
           {
               nsl.push_back(ind);
           }
           else if(s1.size()>0 && s1.top().first<a[i])
           {
               nsl.push_back(s1.top().second);
           }
           else if(s1.size()>0 && s1.top().first>=a[i])
           {
               while(s1.size()>0 && s1.top().first>=a[i])
               {
                   s1.pop();
               }
            if(s1.size()==0)
                { nsl.push_back(ind); }
            else
               { nsl.push_back(s1.top().second); }
           }
           s1.push({a[i],i});
       }
       for(int i=n-1;i>=0;i--)
       {
           if(s2.size()==0)
           {
               nsr.push_back(n);
           }
           else if(s2.size()>0 && s2.top().first<a[i])
           {
               nsr.push_back(s2.top().second);
           }
           else if(s2.size()>0 && s2.top().first>=a[i])
           {
               while(s2.size()>0 && s2.top().first>=a[i])
               {
                   s2.pop();
               }
            if(s2.size()==0)
                { nsr.push_back(n); }
            else
                { nsr.push_back(s2.top().second); }
           }
           s2.push({a[i],i});
       } reverse(nsr.begin(),nsr.end());
       long long int maxi=INT_MIN; 
       for(int i=0;i<nsl.size();i++)
       {
          long long int z= (a[i]* (nsr[i]-nsl[i]-1));
           maxi=max(z,maxi);
           
       }
       return maxi;
    }
    };
